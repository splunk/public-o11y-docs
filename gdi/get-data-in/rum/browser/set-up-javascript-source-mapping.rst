.. _set-up-javascript-source-mapping:

*********************************************************************
Set up JavaScript source mapping 
*********************************************************************


.. meta::
    :description: Your uploaded mapping file enables Splunk RUM to convert stack traces back into a human-readable form.


This page explains how to set up JavaScript source mapping, which allows Splunk RUM to convert stack frames from browser application errors back into a human-readable form so that you can see the exact line of source code related to an error.  

Setting up JavaScript source mapping involves these steps:

* (Optional) Adding the sourcesContent property to the source maps that are generated by your build tool.
* Injecting a code snippet into your minified files using either the splunk-rum CLI or the Splunk Webpack build plugin.
* Uploading your source maps to Splunk RUM.
* Deploying your minified files to your production environment.


Prerequisites
=====================================================================

* Update your browser RUM agent to v0.19.2 or later. Otherwise, Splunk RUM can't symbolicate stack traces from browser apps.
* :ref:`Install the splunk-rum CLI<rum-gdi-install-cli>`.


Option 1: Use the splunk-rum CLI
=====================================================================

#. Set up your build environment:

   #. Verify that your production build tool is configured to generate source maps.
   #. Run the production build for your project.
   #. Verify that your production bundles and source maps were emitted to the same output directory.

#. Find all source map/minified file pairs in the directory you specify, compute a source map ID for each pair, and inject that source map ID into each minified file as a code snippet:

   .. code-block:: bash
    splunk-rum sourcemaps inject --path <path-to-production-files>

#. Upload the source maps in the directory you specify to Splunk RUM. In this command, use the same values for application name (<applicationName>) and application version  (<applicationVersion>) that you used in Configure the Splunk Browser RUM instrumentation â€” Splunk Observability Cloud documentation.

   .. code-block:: bash
    splunk-rum sourcemaps upload \
    --app-name <applicationName> --app-version <applicationVersion> \
    --path <path-to-production-files>


Syntax
---------------------------------------------------------------------

.. code-block:: bash
    splunk-rum [command] [parameters]


Command descriptions
---------------------------------------------------------------------

.. list-table::
   :header-rows: 1
   :widths: 20, 80

   * - :strong:`Command`
     - :strong:`Description`

   * - ``sourcemaps inject --path <path-to-production-files> [optional-parameters]`` 
     -  
        * PLACEHOLDER 
        * PLACEHOLDER

   * - ``sourcemaps upload --path <path-to-production-files> --realm <value> --token <value> [optional-parameters]``  
     - 
        * PLACEHOLDER
        * PLACEHOLDER

